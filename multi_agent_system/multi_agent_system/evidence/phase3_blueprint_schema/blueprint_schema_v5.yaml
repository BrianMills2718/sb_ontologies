# V5.0 Blueprint Schema - Complete Schema Definition
# This schema supports all V5.0 features including reasonableness checks,
# component validation sections, and secure property-based testing

# Schema version identifier
schema_version: "5.0"

# Root schema definition
systemBlueprint:
  type: object
  required: [description, components]
  properties:
    
    # Basic system description
    description:
      type: string
      minLength: 10
      description: "Comprehensive description of the system to be generated"
    
    # NEW V5.0: System-level reasonableness checks
    reasonableness_checks:
      type: array
      description: "System-level validation checks for overall coherence"
      items:
        type: object
        required: [check_type, description, validation_logic]
        properties:
          check_type:
            type: string
            enum: 
              - "component_coherence"
              - "resource_feasibility" 
              - "architectural_consistency"
              - "dependency_validity"
              - "security_requirements"
              - "performance_expectations"
            description: "Type of reasonableness check to perform"
          
          description:
            type: string
            minLength: 5
            description: "Human-readable description of what this check validates"
          
          validation_logic:
            type: string
            description: "Logic for performing the reasonableness check"
          
          severity:
            type: string
            enum: ["error", "warning", "info"]
            default: "error"
            description: "Severity level if check fails"
          
          parameters:
            type: object
            description: "Optional parameters for the validation logic"
    
    # System components with V5.0 validation enhancements
    components:
      type: array
      minItems: 1
      description: "List of system components to be generated"
      items:
        type: object
        required: [name, type]
        properties:
          
          # Basic component identification
          name:
            type: string
            pattern: "^[a-zA-Z][a-zA-Z0-9_]*$"
            description: "Unique component name (valid identifier)"
          
          type:
            type: string
            enum:
              - "web_service"
              - "database"
              - "message_queue"
              - "cache_service"
              - "api_gateway"
              - "authentication_service"
              - "file_storage"
              - "monitoring_service"
              - "load_balancer"
              - "data_processor"
            description: "Type of component to generate"
          
          # Component description
          description:
            type: string
            description: "Detailed component description"
          
          # NEW V5.0: Component validation section
          validation:
            type: object
            description: "V5.0 component-specific validation requirements"
            properties:
              
              # Secure property-based tests
              property_tests:
                type: array
                description: "Secure property tests for this component"
                items:
                  type: object
                  required: [test_type, description]
                  properties:
                    test_type:
                      type: string
                      enum: 
                        - "range_check"
                        - "format_validation"
                        - "dependency_check"
                        - "resource_validation"
                        - "interface_validation"
                        - "security_validation"
                        - "performance_validation"
                      description: "Type of property test (secure predefined types only)"
                    
                    description:
                      type: string
                      minLength: 5
                      description: "Description of what this property test validates"
                    
                    parameters:
                      type: object
                      description: "Parameters for the property test"
                      properties:
                        expected_range:
                          type: object
                          properties:
                            min: {type: number}
                            max: {type: number}
                        
                        format_pattern:
                          type: string
                          description: "Regex pattern for format validation"
                        
                        dependencies:
                          type: array
                          items: {type: string}
                          description: "List of required dependencies"
                        
                        resource_limits:
                          type: object
                          properties:
                            memory_mb: {type: number}
                            cpu_cores: {type: number}
                            disk_gb: {type: number}
                        
                        interface_requirements:
                          type: object
                          properties:
                            input_format: {type: string}
                            output_format: {type: string}
                            protocols: 
                              type: array
                              items: {type: string}
                    
                    severity:
                      type: string
                      enum: ["error", "warning", "info"]
                      default: "error"
                      description: "Severity if property test fails"
              
              # Component contracts
              contracts:
                type: array
                description: "Formal contracts this component must satisfy"
                items:
                  type: object
                  required: [contract_type, specification]
                  properties:
                    contract_type:
                      type: string
                      enum: 
                        - "input_contract"
                        - "output_contract"
                        - "performance_contract"
                        - "availability_contract"
                        - "security_contract"
                      description: "Type of contract"
                    
                    specification:
                      type: string
                      description: "Formal specification of the contract"
                    
                    validation_method:
                      type: string
                      enum: ["runtime_check", "static_analysis", "test_suite"]
                      description: "How to validate this contract"
              
              # Behavioral requirements
              behavioral_requirements:
                type: array
                description: "High-level behavioral requirements"
                items:
                  type: object
                  required: [requirement_type, description]
                  properties:
                    requirement_type:
                      type: string
                      enum:
                        - "functional_requirement"
                        - "performance_requirement"
                        - "security_requirement"
                        - "reliability_requirement"
                        - "scalability_requirement"
                      description: "Type of behavioral requirement"
                    
                    description:
                      type: string
                      minLength: 10
                      description: "Detailed requirement description"
                    
                    acceptance_criteria:
                      type: array
                      items: {type: string}
                      description: "Criteria for validating this requirement"
                    
                    priority:
                      type: string
                      enum: ["critical", "high", "medium", "low"]
                      default: "medium"
                      description: "Priority level of this requirement"
          
          # Component configuration
          configuration:
            type: object
            description: "Component configuration parameters"
            properties:
              environment_variables:
                type: object
                description: "Required environment variables"
              
              resource_requirements:
                type: object
                properties:
                  memory_mb: {type: number, minimum: 64}
                  cpu_cores: {type: number, minimum: 0.1}
                  disk_gb: {type: number, minimum: 1}
                  network_bandwidth_mbps: {type: number}
              
              ports:
                type: array
                items:
                  type: object
                  required: [port, protocol]
                  properties:
                    port: {type: number, minimum: 1, maximum: 65535}
                    protocol: {type: string, enum: ["tcp", "udp", "http", "https"]}
                    description: {type: string}
          
          # Component dependencies
          dependencies:
            type: array
            description: "Other components this component depends on"
            items:
              type: object
              required: [component_name, dependency_type]
              properties:
                component_name:
                  type: string
                  description: "Name of the dependent component"
                
                dependency_type:
                  type: string
                  enum: ["data_dependency", "service_dependency", "configuration_dependency"]
                  description: "Type of dependency relationship"
                
                optional:
                  type: boolean
                  default: false
                  description: "Whether this dependency is optional"

# Schema metadata
metadata:
  schema_author: "V5.0 Blueprint Architecture Team"
  created_date: "2024-12-23"
  version_history:
    - version: "5.0"
      changes: 
        - "Added system-level reasonableness_checks support"
        - "Enhanced component validation sections"
        - "Implemented secure property-based testing framework"
        - "Added formal contract specifications"
        - "Enhanced behavioral requirements system"
      date: "2024-12-23"
  
  validation_notes:
    - "All property tests use secure predefined types only"
    - "No arbitrary code execution allowed in validation"
    - "System-level reasonableness checks are required for complex systems"
    - "Component validation sections are optional but recommended"

# Security constraints
security_constraints:
  property_test_execution:
    - "Only predefined secure property test types allowed"
    - "No dynamic code execution or eval() usage"
    - "All test parameters must be validated against schema"
    - "Property test execution runs in sandboxed environment"
  
  reasonableness_validation:
    - "Reasonableness checks use declarative logic only"
    - "No external system access during validation"
    - "All validation results must be deterministic"