"""
Store Component Registry - Enhanced registry that provides V5EnhancedStore components
This registry replaces basic Store components with V5EnhancedStore throughout the system
"""

import sys
import os
import logging
from typing import Dict, Any, Type, Optional, List
from pathlib import Path

# Import the enhanced store component
try:
    from .enhanced_store_component import EnhancedStoreComponent, create_enhanced_store_component
except ImportError:
    from enhanced_store_component import EnhancedStoreComponent, create_enhanced_store_component

# Import existing component registry
try:
    from autocoder.components.component_registry import ComponentRegistry
    from autocoder.components.store import Store
    from autocoder.components.base import HarnessComponent
    MAIN_REGISTRY_AVAILABLE = True
except ImportError:
    MAIN_REGISTRY_AVAILABLE = False
    # Fallback definitions if not available
    class ComponentRegistry:
        def __init__(self):
            self.component_types = {}
        
        def register_component(self, category: str, name: str, component_class: Type):
            if category not in self.component_types:
                self.component_types[category] = {}
            self.component_types[category][name] = component_class
        
        def get_component_class(self, category: str, name: str) -> Optional[Type]:
            return self.component_types.get(category, {}).get(name)
    
    class Store:
        pass
    
    class HarnessComponent:
        pass

logger = logging.getLogger(__name__)


class EnhancedStoreComponentRegistry:
    """
    Enhanced Component Registry that provides V5EnhancedStore components instead of basic Store components.
    
    This registry ensures that all Store components generated by the system use V5EnhancedStore
    with comprehensive database integration features.
    """
    
    def __init__(self):
        # Initialize the component types mapping
        self.component_types = {}
        
        # Try to inherit from main registry if available
        if MAIN_REGISTRY_AVAILABLE:
            try:
                self.main_registry = ComponentRegistry()
            except Exception as e:
                logger.warning(f"Could not initialize main registry: {e}")
                self.main_registry = None
        else:
            self.main_registry = None
        
        # Initialize with enhanced store components
        self._initialize_enhanced_components()
        
        logger.info("EnhancedStoreComponentRegistry initialized with V5 database integration")
    
    def register_component(self, category: str, name: str, component_class: Type):
        """Register a component class in the registry"""
        if category not in self.component_types:
            self.component_types[category] = {}
        self.component_types[category][name] = component_class
    
    def _initialize_enhanced_components(self):
        """Initialize the registry with enhanced store components"""
        
        # Enhanced Store Components (V5)
        enhanced_store_components = {
            'Store': EnhancedStoreComponent,
            'EnhancedStore': EnhancedStoreComponent,
            'DatabaseStore': EnhancedStoreComponent,
            'V5Store': EnhancedStoreComponent,
            'V5EnhancedStore': EnhancedStoreComponent
        }
        
        # Register enhanced store components
        for name, component_class in enhanced_store_components.items():
            self.register_component('sink', name, component_class)
            self.register_component('store', name, component_class)
        
        # Also register under 'components' category for backward compatibility
        for name, component_class in enhanced_store_components.items():
            self.register_component('components', name, component_class)
        
        logger.debug(f"Registered enhanced store components: {list(enhanced_store_components.keys())}")
    
    def get_component_class(self, category: str, name: str) -> Optional[Type]:
        """
        Get enhanced component class with V5 database integration.
        
        This method ensures that all Store-related components return V5EnhancedStore
        instead of the basic Store class.
        """
        
        # Check if requesting a store component
        if self._is_store_component(category, name):
            logger.debug(f"Providing V5EnhancedStore for component request: {category}.{name}")
            return EnhancedStoreComponent
        
        # Check registry for enhanced components first
        component_class = self.component_types.get(category, {}).get(name)
        
        if component_class:
            return component_class
        
        # Try main registry if available
        if self.main_registry and hasattr(self.main_registry, 'get_component_class'):
            try:
                main_component = self.main_registry.get_component_class(category, name)
                if main_component:
                    return main_component
            except Exception:
                pass
        
        # Fallback: check if it's a store-like component name
        if 'store' in name.lower() or 'sink' in name.lower():
            logger.info(f"Fallback: Providing V5EnhancedStore for store-like component: {category}.{name}")
            return EnhancedStoreComponent
        
        return None
    
    def _is_store_component(self, category: str, name: str) -> bool:
        """Check if the requested component is a store-related component"""
        store_categories = ['sink', 'store', 'components']
        store_names = ['store', 'databasestore', 'enhancedstore', 'v5store', 'v5enhancedstore']
        
        return (category.lower() in store_categories and 
                name.lower() in store_names)
    
    def create_component(self, category: str, name: str, component_name: str, config: Dict[str, Any]) -> Optional[HarnessComponent]:
        """
        Create component instance with V5 database integration.
        
        This method ensures that all Store components are created with V5EnhancedStore features.
        """
        try:
            component_class = self.get_component_class(category, name)
            
            if component_class:
                if component_class == EnhancedStoreComponent:
                    logger.info(f"Creating V5EnhancedStore component: {component_name}")
                    return create_enhanced_store_component(component_name, config)
                else:
                    logger.debug(f"Creating component: {component_name} of type {component_class.__name__}")
                    return component_class(component_name, config)
            
            logger.error(f"No component class found for {category}.{name}")
            return None
            
        except Exception as e:
            logger.error(f"Failed to create component {component_name}: {e}")
            return None
    
    def list_enhanced_components(self) -> Dict[str, List[str]]:
        """List all enhanced components in the registry"""
        enhanced_components = {}
        
        for category, components in self.component_types.items():
            enhanced_list = []
            for name, component_class in components.items():
                if component_class == EnhancedStoreComponent:
                    enhanced_list.append(f"{name} (V5EnhancedStore)")
                else:
                    enhanced_list.append(name)
            
            if enhanced_list:
                enhanced_components[category] = enhanced_list
        
        return enhanced_components
    
    def validate_v5_integration(self) -> Dict[str, Any]:
        """Validate that V5 integration is working correctly"""
        validation_result = {
            "v5_integration_active": True,
            "enhanced_store_available": False,
            "store_components_replaced": False,
            "validation_errors": []
        }
        
        try:
            # Check if EnhancedStoreComponent is available
            store_class = self.get_component_class('sink', 'Store')
            if store_class == EnhancedStoreComponent:
                validation_result["enhanced_store_available"] = True
                validation_result["store_components_replaced"] = True
            else:
                validation_result["validation_errors"].append("Store component not replaced with V5EnhancedStore")
            
            # Test component creation
            test_config = {
                "database": {"database_type": "postgresql"},
                "validation": {"schema_version": "1.0.0"}
            }
            
            test_component = self.create_component('sink', 'Store', 'test_store', test_config)
            
            if isinstance(test_component, EnhancedStoreComponent):
                validation_result["component_creation_success"] = True
            else:
                validation_result["validation_errors"].append("Component creation did not return EnhancedStoreComponent")
            
        except Exception as e:
            validation_result["validation_errors"].append(f"Validation error: {e}")
            validation_result["v5_integration_active"] = False
        
        return validation_result


# Global registry instance
_enhanced_registry = None

def get_enhanced_registry() -> EnhancedStoreComponentRegistry:
    """Get the global enhanced store component registry"""
    global _enhanced_registry
    
    if _enhanced_registry is None:
        _enhanced_registry = EnhancedStoreComponentRegistry()
    
    return _enhanced_registry


def get_enhanced_component_registry() -> EnhancedStoreComponentRegistry:
    """Alias for get_enhanced_registry for backward compatibility"""
    return get_enhanced_registry()


def register_v5_enhanced_store():
    """Register V5EnhancedStore as the default Store component"""
    registry = get_enhanced_registry()
    
    # Register in multiple categories to ensure coverage
    categories = ['sink', 'store', 'components']
    store_types = ['Store', 'DatabaseStore', 'EnhancedStore']
    
    for category in categories:
        for store_type in store_types:
            registry.register_component(category, store_type, EnhancedStoreComponent)
    
    logger.info("V5EnhancedStore registered as default Store component")


def replace_store_in_component_system():
    """Replace Store components throughout the component system with V5EnhancedStore"""
    if not MAIN_REGISTRY_AVAILABLE:
        logger.warning("Main component registry not available for replacement")
        return
        
    try:
        # Try to replace in the main component registry
        from autocoder.components import component_registry as main_registry
        
        if hasattr(main_registry, 'component_types'):
            # Replace Store components
            for category_name, category in main_registry.component_types.items():
                if isinstance(category, dict) and 'Store' in category:
                    category['Store'] = EnhancedStoreComponent
                    logger.info(f"Replaced Store in {category_name} with V5EnhancedStore")
        
        logger.info("Store components replaced with V5EnhancedStore in main component system")
        
    except ImportError:
        logger.warning("Main component registry not available for replacement")
    except Exception as e:
        logger.error(f"Failed to replace Store components: {e}")


# Test harness
if __name__ == "__main__":
    def test_enhanced_store_registry():
        """Test Enhanced Store Component Registry"""
        
        print("Testing Enhanced Store Component Registry...")
        
        # Create registry
        registry = EnhancedStoreComponentRegistry()
        
        # Test component class retrieval
        store_class = registry.get_component_class('sink', 'Store')
        print(f"✅ Store component class: {store_class.__name__ if store_class else 'None'}")
        
        if store_class == EnhancedStoreComponent:
            print("✅ Store component correctly mapped to V5EnhancedStore")
        else:
            print("❌ Store component not mapped to V5EnhancedStore")
        
        # Test component creation
        test_config = {
            "database_type": "postgresql",
            "database": {
                "database_type": "postgresql",
                "host": "localhost",
                "port": 5432
            },
            "validation": {
                "schema_version": "1.0.0"
            }
        }
        
        component = registry.create_component('sink', 'Store', 'test_registry_store', test_config)
        
        if isinstance(component, EnhancedStoreComponent):
            print("✅ Component creation successful - V5EnhancedStore created")
            print(f"   Component name: {component.name}")
            print(f"   Component type: {component.component_type}")
            print(f"   V5 Enhanced: {component.is_v5_enhanced}")
        else:
            print(f"❌ Component creation failed or wrong type: {type(component)}")
        
        # Test registry validation
        validation = registry.validate_v5_integration()
        print(f"✅ V5 Integration Validation: {validation}")
        
        # List enhanced components
        enhanced_components = registry.list_enhanced_components()
        print(f"✅ Enhanced components: {enhanced_components}")
        
        # Test global registry
        global_registry = get_enhanced_registry()
        print(f"✅ Global registry created: {type(global_registry).__name__}")
        
        print("\n🎉 Enhanced Store Component Registry test completed!")
    
    test_enhanced_store_registry()