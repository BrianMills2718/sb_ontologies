{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "Computational Social Science Theory Meta-Schema v3.1",
    "description": "Enhanced version that preserves indigenous terminology and supports theory characteristics while maintaining clean structure",
    "type": "object",
    "patternProperties": {
      "^[a-zA-Z0-9_-]+$": {
        "$ref": "#/definitions/theoryObject"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "theoryObject": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/definitions/metadata"
          },
          "schema": {
            "$ref": "#/definitions/coreSchema"
          },
          "schema_overrides": {
            "$ref": "#/definitions/coreSchema"
          }
        },
        "required": ["metadata"],
        "if": {
          "properties": {
            "metadata": {
              "required": ["extends"]
            }
          }
        },
        "then": {
          "required": ["schema_overrides"],
          "properties": { "schema": { "type": "null", "description": "Schema must not be present when 'extends' is used." } }
        },
        "else": {
          "required": ["schema"],
          "properties": { "schema_overrides": { "type": "null", "description": "Schema_overrides must not be present unless 'extends' is used." } }
        }
      },
      "metadata": {
        "type": "object",
        "properties": {
          "citation": {
            "type": "string",
            "description": "The full bibliographic citation for the source document."
          },
          "annotation": {
            "type": "string",
            "description": "A 1-3 sentence summary of the theory."
          },
          "extends": {
            "type": "string",
            "description": "The key name of another theory in the same file that this theory modifies."
          },
          "model_type": {
            "type": "string",
            "enum": ["property_graph", "hypergraph", "tree", "sequence", "timeline", "table_matrix", "network", "other"],
            "description": "The primary data structure or representation paradigm"
          },
          "theory_characteristics": {
            "type": "object",
            "description": "Flags indicating which optional sections are relevant",
            "properties": {
              "formality": {
                "type": "string",
                "enum": ["formal", "semi-formal", "informal", "empirical"],
                "description": "Level of mathematical/logical formalization"
              },
              "has_axioms": {
                "type": "boolean",
                "description": "Whether the theory includes formal axioms or rules"
              },
              "has_process": {
                "type": "boolean",
                "description": "Whether the theory describes processes or workflows"
              },
              "has_analytics": {
                "type": "boolean",
                "description": "Whether the theory specifies analytical methods"
              },
              "has_telos": {
                "type": "boolean",
                "description": "Whether the theory defines goals or success criteria"
              }
            }
          }
        },
        "required": ["citation", "annotation"]
      },
      "coreSchema": {
        "type": "object",
        "properties": {
          "components": {
            "type": "object",
            "description": "A library of reusable, named Process blocks.",
            "patternProperties": {
              "^[a-zA-Z0-9_-]+$": { "$ref": "#/definitions/process" }
            },
            "additionalProperties": false
          },
          "Ontology": { "$ref": "#/definitions/ontology" },
          "Axioms": { "$ref": "#/definitions/axioms" },
          "Analytics": { "$ref": "#/definitions/analytics" },
          "Process": { "$ref": "#/definitions/process" },
          "Telos": { "$ref": "#/definitions/telos" }
        },
        "required": [
          "Ontology"
        ]
      },
      "ontology": {
        "type": "object",
        "properties": {
          "entities": {
            "type": "array",
            "items": { "$ref": "#/definitions/termDefinition" },
            "description": "The fundamental units, nodes, or elements (our 'Nodes/Units')"
          },
          "connections": {
            "type": "array",
            "items": { "$ref": "#/definitions/termDefinition" },
            "description": "How entities relate to each other (our 'Connections')"
          },
          "properties": {
            "type": "array",
            "items": { "$ref": "#/definitions/propertyDefinition" },
            "description": "Attributes that can be attached to entities or connections (our 'Properties')"
          },
          "modifiers": {
            "type": "array",
            "items": { "$ref": "#/definitions/modifierDefinition" },
            "description": "Qualifiers that condition or contextualize (our 'Modifiers')"
          }
        },
        "required": ["entities"]
      },
      "termDefinition": {
        "type": "object",
        "properties": {
          "name": { 
            "type": "string",
            "description": "Standardized name for cross-theory comparison" 
          },
          "indigenous_term": { 
            "type": "string",
            "description": "The exact term used in the source paper (required to preserve original language)" 
          },
          "description": { "type": "string" },
          "notation": {
            "type": "object",
            "description": "Mathematical or symbolic notation if used",
            "properties": {
              "symbol": { "type": "string", "description": "The symbol as it appears" },
              "latex": { "type": "string", "description": "LaTeX representation if applicable" },
              "unicode": { "type": "string", "description": "Unicode representation if applicable" },
              "usage_example": { "type": "string", "description": "Example of how it's used in context" }
            }
          },
          "examples": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Concrete examples from the paper"
          },
          "subTypeOf": { "type": "string" },
          "properties": { "type": "object" },
          "domain": { "type": "array", "items": { "type": "string" } },
          "range": { "type": "array", "items": { "type": "string" } }
        },
        "required": ["indigenous_term", "description"]
      },
      "propertyDefinition": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "indigenous_term": { "type": "string" },
          "description": { "type": "string" },
          "type": { 
            "type": "string",
            "enum": ["numeric", "categorical", "boolean", "string", "complex", "derived"]
          },
          "applies_to": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Which entities or connections this property can be attached to"
          },
          "computation": {
            "type": "string",
            "description": "Formula or method for calculating derived properties"
          },
          "values": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Possible values for categorical properties"
          }
        },
        "required": ["indigenous_term", "description"]
      },
      "modifierDefinition": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "indigenous_term": { "type": "string" },
          "description": { "type": "string" },
          "category": {
            "type": "string",
            "enum": ["temporal", "modal", "truth_value", "certainty", "normative", "other"]
          },
          "values": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Possible values this modifier can take"
          },
          "applies_to": {
            "type": "array",
            "items": { "type": "string" },
            "description": "What this modifier can qualify (entities, connections, properties)"
          }
        },
        "required": ["indigenous_term", "description", "category"]
      },
      "axioms": {
        "type": "object",
        "properties": {
          "principles": {
            "type": "array",
            "items": { 
              "type": "object",
              "properties": {
                "statement": { "type": "string", "description": "Natural language statement" },
                "indigenous_notation": { "type": "string", "description": "How it appears in the paper" },
                "formalization": { "type": "string", "description": "Formal/logical representation if applicable" }
              },
              "required": ["statement"]
            },
            "description": "Broad, philosophical assumptions in natural language."
          },
          "rules": {
            "type": "array",
            "items": { 
              "type": "object",
              "properties": {
                "name": { "type": "string" },
                "indigenous_notation": { "type": "string", "description": "Original notation from paper" },
                "description": { "type": "string" },
                "if": { "type": "string", "description": "Condition or antecedent" },
                "then": { "type": "string", "description": "Consequence or result" },
                "formal_representation": { "type": "object", "description": "Machine-readable form if applicable" }
              },
              "required": ["indigenous_notation", "description"]
            },
            "description": "Formal, structured axioms or logical rules."
          },
          "domain_of_applicability": { "type": "string" }
        }
      },
      "analytics": {
        "type": "object",
        "properties": {
          "analytical_primitives": {
            "type": "array",
            "items": { "type": "string" }
          },
          "focal_concepts": {
            "type": "array",
            "items": { 
              "type": "object",
              "properties": {
                "concept": { "type": "string" },
                "indigenous_term": { "type": "string" },
                "why_important": { "type": "string" },
                "how_identified": { "type": "string" }
              },
              "required": ["concept", "why_important"]
            }
          },
          "triggers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": { "type": "string" },
                "condition": { "type": "string" },
                "action": { "type": "string" }
              },
              "required": ["name", "condition"]
            }
          },
          "metrics": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": { "type": "string" },
                "indigenous_term": { "type": "string" },
                "description": { "type": "string" },
                "formula": { "type": "string" },
                "interpretation": { "type": "string" },
                "range": { "type": "string", "description": "Expected value range" }
              },
              "required": ["indigenous_term", "description"]
            },
            "description": "Quantitative measures defined by the theory"
          }
        }
      },
      "process": {
        "type": "object",
        "properties": {
          "mode": {
            "type": "string",
            "enum": ["workflow", "sequential", "parallel", "iterative", "none"],
            "description": "The type of process, or 'none' if theory has no process"
          }
        },
        "required": ["mode"],
        "oneOf": [
          { "$ref": "#/definitions/workflowProcess" },
          { "$ref": "#/definitions/sequentialProcess" },
          { "$ref": "#/definitions/parallelProcess" },
          { "$ref": "#/definitions/iterativeProcess" },
          { "$ref": "#/definitions/noProcess" }
        ]
      },
      "workflowProcess": {
        "properties": {
          "mode": { "const": "workflow" },
          "entry_point": { "type": "string" },
          "nodes": {
            "type": "object",
            "patternProperties": {
              "^[a-zA-Z0-9_-]+$": {
                "type": "object",
                "properties": {
                  "action": { "type": "string" },
                  "description": { "type": "string" }
                },
                "required": ["action"]
              }
            }
          },
          "edges": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "source": { "type": "string" },
                "target": { "type": "string" },
                "condition": { "type": "string" }
              },
              "required": ["source", "target"]
            }
          }
        },
        "required": ["entry_point", "nodes", "edges"]
      },
      "sequentialProcess": {
        "properties": {
          "mode": { "const": "sequential" },
          "steps": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "stage_name": { "type": "string" },
                "objective": { "type": "string" },
                "completion_criteria": { "type": "string" }
              },
              "required": ["stage_name", "objective", "completion_criteria"]
            }
          }
        },
        "required": ["steps"]
      },
      "parallelProcess": {
        "properties": {
          "mode": { "const": "parallel" },
          "lenses": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": { "type": "string" },
                "instruction": { "type": "string" }
              },
              "required": ["name", "instruction"]
            }
          }
        },
        "required": ["lenses"]
      },
      "iterativeProcess": {
        "properties": {
          "mode": { "const": "iterative" },
          "initialization": { "type": "string" },
          "iteration_step": { "type": "string" },
          "convergence_criteria": { "type": "string" },
          "max_iterations": { "type": "integer" }
        },
        "required": ["initialization", "iteration_step", "convergence_criteria"]
      },
      "noProcess": {
        "properties": {
          "mode": { "const": "none" },
          "explanation": { 
            "type": "string", 
            "description": "Why this theory has no process (e.g., 'descriptive taxonomy', 'static framework')" 
          }
        }
      },
      "telos": {
        "type": "object",
        "properties": {
          "purpose": {
            "type": "string",
            "description": "What the theory aims to achieve or explain"
          },
          "output_format": {
            "type": "object",
            "description": "A schema defining the structure of the final output."
          },
          "success_criteria": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Conditions that indicate successful application"
          },
          "applications": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Example use cases or domains where the theory applies"
          }
        }
      }
    }
  }